8-BIT MULTIPLICATION 
EXP NO: 3 
 
AIM: To write an assembly language program to implement 8-bit multiplication using 8085 processor. 
 
ALGORITHM: 
1)	Start the program by loading a register pair with the address of memory location. 
2)	Move the data to a register. 
3)	Get the second data and load it into the accumulator. 
4)	Add the two register contents. 
5)	Increment the value of the carry. 
6)	Check whether the repeated addition is over. 
7)	Store the value of product and the carry in the memory location. 
8)	Halt. 
 
PROGRAM: 
 
       LDA 8500 
       MOV B, A 
       LDA 8501 
       MOV C, A 
       CPI 00 
       JZ LOOP 
       XRA A 
       LOOP1: ADD B 
       DCR C 
       JZ LOOP 
       JMP LOOP1 
       LOOP: STA 8502 
       RST 1       
 
RESULT: Thus the program was executed successfully using 8085 processor simulator. 
 	 
 
8-BIT DIVISION 
EXP NO: 4
 
AIM: To write an assembly language program to implement 8-bit division using 8085 processor. 
 
ALGORITHM: 
1)	Start the program by loading a register pair with the address of memory location. 
2)	Move the data to a register. 
3)	Get the second data and load it into the accumulator. 
4)	Subtract the two register contents. 
5)	Increment the value of the carry. 
6)	Check whether the repeated subtraction is over. 
7)	Store the value of quotient and the reminder in the memory location. 
8)	Halt. 
 
PROGRAM: 
 
        LDA 8501 
        MOV B, A 
        LDA 8500 
        MVI C,00 
        LOOP:CMP B 
        JC LOOP1 
        SUB B 
        INR C 
        JMP LOOP 
        STA 8503 
        DCR C 
        MOV A, C 
        LOOP1: STA 8502 
        RST 1  
INPUT: 
 
 
OUTPUT: 
 
 
 
16-BIT SUBTRACTION 
EXP NO: 6
 
AIM: To write an a	nguage program to implement 16-bit subtraction using 8085 processor. 
 
ALGORITHM: 
1)	Start the program by loading a register pair with address of 1st number. 
2)	Copy the data to another register pair. 
3)	Load the second number to first registre pair. 
4)	Subtract the two register pair contents. 
5)	Check for borrow. 
6)	Store the value of difference and borrow in memory locations. 
7)	End. 
 
PROGRAM: 
 
      LHLD 2050       XCHG 
      LHLD 2052 
      MVI C,00 
      MOV A, E 
      SUB L 
      STA 2054 
      MOV A, D 
      SUB H 
      STA 2055 
      HLT 
 
INPUT: 
 
 
OUTPUT: 
 
 
 
 
 
 
RESULT: Thus the program was executed successfully using 8085 processor simulator. 
16-BIT MULTIPLICATION 
EXP NO: 7
 
AIM: To write an a	nguage program to implement 16-bit multiplication using 8085 processor. 
 
ALGORITHM: 
1)	Load the first data in HL pair. 
2)	Move content of HL pair to stack pointer. 
3)	Load the second data in HL pair and move it to DE. 
4)	Make H register as 00H and L register as 00H. 
5)	ADD HL pair and stack pointer. 
6)	Check for carry if carry increment it by 1 else move to next step. 
7)	Then move E to A and perform OR operation with accumulator and register D. 
8)	The value of operation is zero, then store the value else go to step 3. 
 
PROGRAM: 
 
         LHLD 2050 
         SPHL 
         LHLD 2052 
         XCHG 
         LXI H,0000H 
         LXI B,0000H 
         AGAIN: DAD SP 
         JNC START 
         INX B 
         START: DCX D 
         MOV A,E 
         ORA D 
         JNZ AGAIN 
         SHLD 2054 
         MOV L,C 
         MOV H,B 
         SHLD 2056 
         
 
16-BIT DIVISION 
EXP NO: 8 
 
AIM: To write an assembly language program to implement 16-bit divided by 8-bit using 8085 processor. 
 
ALGORITHM: 
  
1)	Read dividend (16 bit) 
2)	Read divisor 
3)	count <- 8 
4)	Left shift dividend 
5)	Subtract divisor from upper 8-bits of dividend 
6)	If CS = 1 go to 9 
7)	Restore dividend 
8)	Increment lower 8-bits of dividend 
9)	count <- count - 1 
10)	If count = 0 go to 5 
11)	Store upper 8-bit dividend as remainder and lower 8-bit as quotient 12) Stop 
PROGRAM: 
LDA 8501 
MOV B,A 
LDA 8500 
MVI C,00 
LOOP:CMP B 
JC LOOP1 
SUB B 
INR C 
JMP LOOP 
STA 8503 
DCR C 
MOV A,C 
LOOP1: STA 8502 
RST 1 
 








FACTORIAL OF A GIVEN NUMBER  
 
EXP NO: 9 
 
AIM: To find the factorial of a given number using 8085 microprocessor. 
 
ALGORITHM: 
1)	Load the data into register B 
2)	To start multiplication set D to 01H 
3)	Jump to step 7 
4)	Decrements B to multiply previous number 
5)	Jump to step 3 till value of B>0 
6)	Take memory pointer to next location and store result 
7)	Load E with contents of B and clear accumulator 
8)	Repeatedly add contents of D to accumulator E times 
9)	Store accumulator content to D 
10)	Go to step 4 
PROGRAM: 
LDA 2001 
MOV B,A 
MVI C,#01 
MVI E,#01 
LOOP: MOV D,C 
MVI A,00H 
LP: ADD E 
DCR D 
JNZ LP 
MOV E,A 
INR C 
DCR B 
JNZ LOOP 
MOV A,E STA 2010 
HLT 








. 
 
 
ASCENDING ORDER 
 
EXP NO: 12
 
AIM: To compute ascending order of an array using 8085 processor. 
 
ALGORITHM:  
 
1)	Initialize HL pair as memory pointer. 
2)	Get the count at memory and load it into C register 3) Copy it in D register (for bubble sort (N-1)) times required). 
4)	Get the first value in A register. 
5)	Compare it with the value at next location. 
6)	If they are out of order, exchange the contents of A register and memory. 
7)	Decrement D register content by 1 
8)	Repeat step 5 and 7 till the value in D register become zero. 
9)	Decrement the C register content by 1. 
10)	Repeat steps 3 to 9 till the value in C register becomes zero. 
 
PROGRAM: 
LOOP: LXI H,3500 
MVI D,00 
MVI C,05 
LOOP1: MOV A,M 
INX H 
CMP M 
JC LOOP2 MOV B,M 
MOV M,A 
DCX H 
MOV M,B 
INX H 
MVI D,01 
LOOP2: DCR C 
JNZ LOOP1 
MOV A,D 
RRC  
JC LOOP 
HLT 
 
  
DESCENDING ORDER 
 
EXP NO: 13
 
AIM: To compute descending order of an array using 8085 processor. 
 
ALGORITHM:  
 
1)	Initialize HL pair as memory pointer. 
2)	Get the count at memory and load it into C register 3) Copy it in D register (for bubble sort (N-1)) times required). 
4)	Get the first value in A register. 
5)	Compare it with the value at next location. 
6)	If they are out of order, exchange the contents of A register and memory. 
7)	Decrement D register content by 1 
8)	Repeat step 5 and 7 till the value in D register become zero. 
9)	Decrement the C register content by 1. 
10)	Repeat steps 3 to 9 till the value in C register becomes zero. 
 
PROGRAM: 
 
LOOP: LXI H,3500 
MVI D,00 
MVI C,05 
LOOP1: MOV A,M 
INX H 
CMP M 
JNC LOOP2 
MOV B,M 
MOV M,A 
DCX H 
MOV M,B 
INX H 
MVI D,01 
LOOP2: DCR C 
JNZ LOOP1 
MOV A,D 
RRC  
JC LOOP 
HLT 
 
 
RESULT: Thus the program was executed successfully using 8085 processor simulator.  
  
ADDITION OF N NUMBERS 
 
EXP NO: 14
 
AIM: To compute addition of N numbers using 8085 processor. 
 
ALGORITHM:  
 
1)	Load the base address of the array in HL register pair. 
2)	Load the memory with data to be added. 
3)	Take it as count. 
4)	Initialize the accumulator with 00. 
5)	Add content of accumulator with content of memory. 
6)	Decrement count. 
7)	Load count value to memory location. 
8)	Repeat step 5. 
9)	Check whether count has become 0. 
10)	Halt. 
 
PROGRAM: 
LXI H,8000 
MOV C,M 
MVI A,00 
MOV B,A 
LOOP: ADD C 
JNC SKIP 
INR B 
SKIP: DCR C 
JNZ LOOP 
LXI H,8007 
MOV M,A 
INX H 
MOV M,B HLT 

 
 
 
SQUARE OF NUMBER 
 
EXP NO: 16
 
AIM: To compute square of number using 8085 processor. 
 
ALGORITHM:  
 
1)	Load the base address of the array in HL register pair. 
2)	Assign accumulator as 0. 
3)	Load the content of memory location specified into register. 
4)	Add content of memory location with accumulator and decrement register content by 01. 
5)	Check if register holds 00, if so store the value of accumulator in memory location. 
 
 
PROGRAM: 
LXI H,8000 
XRA A 
MOV B,M 
LOOP: ADD M 
DCR B 
JNZ LOOP 
STA 8001 
HLT 
 
INPUT: 
 
 
 
 
OUTPUT: 
 
 
 
 
 
 
RESULT: Thus the program was executed successfully using 8085 processor simulator.  
 
 
 
 
ONEs AND TWOs COMPLEMENT 
 
EXP NO: 17
 
AIM: To compute one’s and two’s complement using 8085 processor. 
 
 
 
ALGORITHM:  
 
1)	Load the base address of the array in a register pair. 
2)	Move the data from memory location into accumulator. 
3)	Convert all ones into zeros and zeros into ones. 
4)	Add 01 to the accumulator content. 
5)	Store the results of one’s and two’s complement. 
 
 
PROGRAM: 
LDA 3000 
CMA 
STA 3001 
ADI 01 
STA 3002 
HLT 
 
INPUT: 
 
 
 
OUTPUT: 
 
 
  
 
 
DECIMAL TO OCTAL CONVERSION 
EXP NO: 23 
 
AIM: To write a C program to implement decimal to octal conversion. 
 
ALGORITHM: 
1)	Store the remainder when the number is divided by 8 in an array. 
2)	Divide the number by 8 now 
3)	Repeat the above two steps until the number is not equal to 0. 
4)	Print the array in reverse order now. 
 
PROGRAM: 
#include <stdio.h> int main() {     long decimal, remainder, quotient,octal=0;     int octalnum[100], i = 1, j;     printf("Enter the decimal number: ");     scanf("%ld", &decimal);     quotient = decimal;     while (quotient != 0) 
    { 
        octalnum[i++] = quotient % 8;         quotient = quotient / 8; 
    } 
    for (j = i - 1; j > 0; j--)         octal= octal*10 + octalnum[j];     printf("Equivalent octal value of decimal no %d is: %d  ", decimal,octalnum);     return 0; 
} 
 
INPUT: 
 
 
OUTPUT: 
 
RESULT: Thus the program was executed successfully using DevC++. 
 



CPU PERFORMANCE 
EXP NO: 26 
 
AIM: To write a C program to implement CPU performance measures. 
 
ALGORITHM: 
Step 1: start 
Step 2:Declare the necessary variables: cr (clock rate), p (number of processors), p1 (a copy of the number of processors), i (loop variable), and cpu (array to store CPU times). 
Step 3: Initialize the cpu array elements to 0. 
Step 4: Prompt the user to enter the number of processors (p). 
Step 5: Store the value of p in p1. Step 6: Start a loop from 0 to p-1: 
a.	Prompt the user to enter the cycles per instruction (cpi) for the current processor. 
b.	Prompt the user to enter the clock rate (cr) in GHz for the current processor. 
c.	Calculate the CPU time (ct) using the formula: ct = 1000 * cpi / cr. 
d.	Display the CPU time for the current processor. 
e.	Store the CPU time in the cpu array at index i. 
Step 7: Set max as the first element of the cpu array. 
Step 8:Start a loop from 0 to p1-1: 
      a. If the CPU time at index i is less than or equal to max, update max to the current CPU time. 
Step 9: Display the processor with the lowest execution time (max). Step 10: Exit the program. 
 
 
PROGRAM: 
 
  #include <stdio.h> 
 
int main()  
{   float cr;   int p,p1,i;   float cpu[5];   float cpi,ct,max;   int n=1000;   for(i=0;i<=4;i++) 
  { 
      cpu[5]=0; 
  } 
  printf("\n Enter the number of processors:"); 
  scanf("%d",&p);   p1=p; 
  for(i=0;i<p;i++) 
{ 
    printf("\n Enter the Cycles per Instrcution of processor:"); 
  scanf("%f",&cpi); 
  printf("\n Enter the clockrate in GHz:");   scanf("%f",&cr);   ct=1000*cpi/cr; 
  printf("The CPU time is: %f",ct); 
  cpu[i]=ct; 
} max=cpu[0]; for(i=0;i<p1;i++) 
{     if(cpu[i]<=max)     max=cpu[i]; 
} 
printf("\n The processor has lowest Execution time is: %f ", max);     return 0; 
} 
 
 
 
INPUT: 
 
 
 
 
 
 
OUTPUT: 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
RESULT: Thus the program was executed successfully using DevC++. 
 
 
 
 
 
 
 
